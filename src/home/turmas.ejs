<!-- Desenvolvido por Murillo -->

<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Home</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    /* Body - Estilização global */
    body {
      overflow-x: hidden;
      /* Remove barra lateral horizontal */
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      /* Fontes modernas e limpas */
      background-color: #f0f2f7;
      /* Fundo claro e suave */
    }

    /* Sidebar - Container lateral fixo */
    #sidebar {
      width: 240px;
      /* Largura padrão */
      min-height: 100vh;
      /* Altura igual à janela inteira */
      background: linear-gradient(135deg, #223343, #1a2b3c);
      /* Gradiente escuro */
      color: #e6ebf1;
      /* Texto claro para contraste */
      position: fixed;
      /* Fixa na tela */
      top: 0;
      left: 0;
      transition: transform 0.35s ease, width 0.35s ease;
      /* Suaviza colapso/expansão */
      overflow-y: auto;
      /* Permite rolar verticalmente */
      box-shadow: 2px 0 12px rgba(0, 0, 0, 0.3);
      /* Sombra lateral */
      z-index: 1040;
      /* Mantém acima dos outros elementos */
      display: flex;
      flex-direction: column;
      /* Apresentação vertical dos itens internos */
    }

    /* Sidebar - Estado colapsado */
    #sidebar.collapsed {
      transform: translateX(-260px);
      /* Move para fora da tela */
      width: 60px;
      /* Encolhe para mostrar só ícones */
      overflow-x: visible;
    }

    /* Sidebar Header - Título do menu lateral */
    #sidebar .sidebar-header {
      font-weight: 700;
      /* Título destacado */
      font-size: 1.6rem;
      /* Tamanho grande */
      padding: 1.5rem 1.5rem;
      /* Espaçamento interno */
      border-bottom: 1px solid #374259;
      /* Linha separadora abaixo */
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      /* Adiciona "..." se texto exceder espaço */
    }

    /* Sidebar Header - Colapsado */
    #sidebar.collapsed .sidebar-header {
      padding-left: 0.7rem;
      /* Reduz espaço à esquerda */
      font-size: 1.25rem;
      /* Diminui a fonte */
    }

    /* Sidebar Navigation - Navegação principal */
    #sidebar nav {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      padding-top: 1rem;
    }

    /* Navigation Link - Estilização dos links */
    .nav-link {
      color: #aabbcc;
      /* Tom claro para links */
      font-weight: 600;
      padding: 0.75rem 1.5rem;
      border-left: 4px solid transparent;
      /* Borda para destacar ativo */
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
      cursor: pointer;
      display: flex;
      align-items: center;
    }

    /* Icone no link de navegação - Deixar sem link*/
    .nav-link .icon {
      font-size: 1.25rem;
      margin-right: 1rem;
      min-width: 24px;
      text-align: center;
    }

    /* Hover/Active Link - Indicação visual do link ativo/passando o mouse */
    .nav-link:hover,
    .nav-link.active {
      background-color: #2d4363;
      border-left-color: #4979d5;
      color: #e6ebf1;
      text-decoration: none;
    }

    /* Sidebar colapsado - Esconde texto dos links */
    #sidebar.collapsed .nav-link .text {
      display: none;
    }

    /* Submenu - links secundários internos em navegação */
    .submenu {
      padding-left: 3.5rem;
      /* Indenta submenu */
      font-weight: normal;
      font-size: 0.9rem;
      display: none;
      flex-direction: column;
    }

    /* Submenu ativado (exibido) */
    .submenu.show {
      display: flex;
    }

    /* Links do submenu */
    .submenu .nav-link {
      border: none;
      padding: 0.4rem 1rem;
      color: #94a1b2;
    }

    /* Hover/Active no submenu */
    .submenu .nav-link:hover,
    .submenu .nav-link.active {
      background-color: transparent;
      color: #4979d5;
      text-decoration: underline;
      border: none;
    }

    /* Botão Toggle Sidebar - Ícone para esconder/exibir sidebar */
    #toggleSidebar {
      position: fixed;
      top: 1.5rem;
      left: 240px;
      /* Encostado ao sidebar */
      padding: 0.9rem 0.8rem;
      border: none;
      background-color: #4979d5;
      color: white;
      border-radius: 0 12px 12px 0;
      cursor: pointer;
      font-size: 1.3rem;
      box-shadow: 0 3px 12px rgb(73 121 213 / 0.7);
      transition: left 0.35s ease, width 0.35s ease, font-size 0.3s ease;
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      white-space: nowrap;
    }

    /* Botão Toggle Sidebar - Estado colapsado */
    #toggleSidebar.collapsed {
      left: 0;
      /* Fixado à borda */
      width: auto;
      font-size: 1rem;
      padding: 0.9rem 0.8rem;
      justify-content: center;
      border-radius: 0 12px 12px 0;
    }

    /* Área principal do conteúdo */
    #content-area {
      margin-left: 310px;
      /* Reservando espaço para sidebar */
      padding: 2rem 2rem 2rem 2rem;
      transition: margin-left 0.35s ease;
    }

    /* Área principal - sidebar expandido */
    #content-area.expanded {
      margin-left: 100px;
      /* Sidebar menor */
    }

    /* Cards - blocos de informação visual */
    .cards .card {
      cursor: pointer;
      transition: all 0.25s ease;
      border-radius: 12px;
      box-shadow: 0 4px 8px rgb(0 0 0 / 0.1);
      border: none;
      background-color: #ffffff;
      width: 300px;
      /* Define largura fixa */
      max-width: 100%;
      /* Limita largura máxima ao contêiner */
      height: 280px !important;
    }

    .cards .card:hover {
      box-shadow: 0 12px 25px rgb(0 0 0 / 0.15);
      transform: translateY(-6px);
      /* Efeito de elevação */
    }

    /* Card título */
    .card-title {
      font-weight: 700;
      color: #223343;
    }

    /* Card texto */
    .card-text {
      color: #4a4a4a;
      font-size: 0.95rem;
      line-height: 1.3;
    }

    /* Botão dentro do card */
    .card-btn {
      background-color: #4979d5;
      border: none;
      color: white;
      border-radius: 0.375rem;
      padding: 0.4rem 1.2rem;
      transition: background-color 0.3s ease;
    }

    .card-btn:hover,
    .card-btn:focus {
      background-color: #365f9a;
      outline: none;
    }

    /* Responsividade para telas menores */
    @media (max-width: 767px) {

      /* Sidebar em mobile */
      #sidebar {
        transform: translateX(-280px);
        width: 280px;
      }

      #sidebar.collapsed {
        width: 280px;
        transform: translateX(-280px);
      }

      /* Conteúdo sem margem lateral */
      #content-area {
        margin-left: 0 !important;
        padding: 1rem;
      }

      /* Botão toggle mais visível */
      #toggleSidebar {
        left: 1rem !important;
      }
    }
  </style>
</head>

<body>
  <aside id="sidebar" aria-label="Barra lateral principal">
    <div class="sidebar-header" title="Projeto NotaDez">Projeto NotaDez</div>
    <nav>
      <a href="javascript:void(0);" class="nav-link" id="instituicoesToggle" aria-expanded="false"
        aria-controls="instituicoesSubmenu" tabindex="0">
        Instituição
        <span style="margin-left:auto; font-weight: 600; font-size: 0.85rem;">▸</span>
      </a>

      <div class="submenu" id="instituicoesSubmenu" aria-label="Submenu instituições">
        <a href="#" class="nav-link" tabindex="0">Insituição 1</a>
      </div>

      <a href="#" class="nav-link" tabindex="0">
        <span class="text">Disciplinas</span>
      </a>

      <a href="#" class="nav-link" tabindex="0">
        <span class="text">Turmas</span>
      </a>

      <a href="#" class="nav-link" tabindex="0">
        <span class="text">Gerenciar Turmas</span>
      </a>

    </nav>
  </aside>

  <button id="toggleSidebar" aria-label="Ocultar barra lateral" title="Ocultar barra lateral">
    ←
  </button>

  <main id="content-area" tabindex="0" role="main" aria-live="polite" aria-atomic="true">
    <h2 class="instituicao-titulo mb-4">Nome da Instituição 1</h2>
    <div class="container-fluid cards row g-4" id="cardsContainer">
      <!-- Cards inseridos via JS -->
    </div>
  </main>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>

    // Definir Variaveis
    const sidebar = document.getElementById('sidebar');
    const toggleSidebarBtn = document.getElementById('toggleSidebar');
    const contentArea = document.getElementById('content-area');
    const sideLinks = document.querySelectorAll('#sidebar .nav-link');

    const instituicoesToggle = document.getElementById('instituicoesToggle');
    const instituicoesSubmenu = document.getElementById('instituicoesSubmenu');
    let instituicoesExpanded = false;
    
    // Adiciona link para os elementos da barra lateral
    sideLinks.forEach(link => {
      link.addEventListener('click', function () {
        sideLinks.forEach(l => l.classList.remove('active'));
        this.classList.add('active');
      });
    });

    // Controle do submenu "Instituições"
    instituicoesToggle.addEventListener('click', () => {
      instituicoesExpanded = !instituicoesExpanded;
      instituicoesSubmenu.classList.toggle('show', instituicoesExpanded);
      instituicoesToggle.setAttribute('aria-expanded', instituicoesExpanded);
      instituicoesToggle.querySelector('span:last-child').textContent = instituicoesExpanded ? '▾' : '▸';

      if (instituicoesExpanded) {
        sideLinks.forEach(l => l.classList.remove('active'));
        instituicoesToggle.classList.add('active');
      } else {
        instituicoesToggle.classList.remove('active');
      }
    });

    // Marcar Instituições quando selecionada

    const submenuLinks = instituicoesSubmenu.querySelectorAll('.nav-link');
    submenuLinks.forEach(link => {
      link.addEventListener('click', function (e) {
        sideLinks.forEach(l => l.classList.remove('active'));
        instituicoesToggle.classList.add('active');
      });
    });

    // Barra lateral e Configuração

    toggleSidebarBtn.addEventListener('click', () => {
      const collapsed = sidebar.classList.toggle('collapsed');
      if (collapsed) {
        toggleSidebarBtn.classList.add('collapsed');
        toggleSidebarBtn.innerHTML = '▶ Mostrar';
        contentArea.classList.add('expanded');
      } else {
        toggleSidebarBtn.classList.remove('collapsed');
        toggleSidebarBtn.innerHTML = '←';
        contentArea.classList.remove('expanded');
      }
    });


    // Dados dos cards
    const cardsData = [
      {
        id: 1,
        title: 'Turma 1',
        descriptions: [
          'Código da Turma: 250100'
        ],
        onClick: () => alert('Gerenciar Notas')
      },
      {
        id: 2,
        title: 'Turma 2',
        descriptions: [
          'Código da Turma: 250101'
        ],
        description: 'Código da Turma: 250101',
        onClick: () => alert('Relatórios')
      },
      {
        id: 3,
        title: 'Turma 3',
        descriptions: [
          'Código da Turma: 250102'
        ],
        onClick: () => alert('Perfil do Usuário')
      },
      {
        id: 4,
        title: 'Turma 4',
        descriptions: [
          'Código da Turma: 250103',
        ],
        onClick: () => alert('Configurações')
      },
    ];

  // Função para renderizar um card novo dinamicamente
  function renderCard(card) {
    const col = document.createElement('div');
    col.className = 'col-sm-6 col-md-4 col-lg-3';

    const cardEl = document.createElement('div');
    cardEl.className = 'card h-100 shadow p-3';
    cardEl.tabIndex = 0;
    cardEl.setAttribute('role', 'button');
    cardEl.setAttribute('aria-pressed', 'false');

    cardEl.innerHTML = `
      <div class="card-body d-flex flex-column">
        <h5 class="card-title">${card.title}</h5>
        <div class="card-text flex-grow-1">
          ${card.descriptions.map(desc => `<p>${desc}</p>`).join('')}
        </div>
        <div class="d-flex gap-2 mt-auto">
          <button class="card-btn btn align-self-start">Abrir</button>
          <button class="btn btn-danger btn-trash align-self-start" title="Excluir turma" aria-label="Excluir turma">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
              <path d="M5 6h14v2H5zm2 2v12c0 1.104.896 2 2 2h6c1.104 0 2-.896 2-2V8H7zm3 10h2v-8h-2v8zm-2 0h2v-8h-2v8zm4 0h2v-8h-2v8zm-4.293-16.707A.99943.99943 0 007 3c0 .553.447 1 1 1h8c.553 0 1-.447 1-1a.99943.99943 0 00-.293-.707C16.125 1.496 15.573 1 15 1H9c-.573 0-1.125.496-1.293 1.293z"/>
            </svg>
          </button>
        </div>
      </div>
    `;

    // Excluir card ao clicar na lata de lixo
    cardEl.querySelector('.btn-trash').onclick = e => {
      e.stopPropagation(); // evita disparar outros eventos
      col.remove(); // Remove o card (coluna) do DOM
      // Opcional: remova do array cardsData se precisar
    };

    cardEl.onclick = () => {
      card.onClick();
    };

    cardEl.onkeypress = (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        card.onClick();
      }
    };

    cardEl.querySelector('button').onclick = e => {
      e.stopPropagation();
      card.onClick();
    };

    col.appendChild(cardEl);
    cardsContainer.appendChild(col);
    return col;
  }

  // Renderiza cards iniciais
  cardsData.forEach(card => {
    renderCard(card);
  });

  // Card adicionar
  const colAdd = document.createElement('div');
  colAdd.className = 'col-sm-6 col-md-4 col-lg-3';
  const cardAdd = document.createElement('div');
  cardAdd.className = 'card h-100 shadow p-3 d-flex justify-content-center align-items-center text-center card-add-turma';
  cardAdd.tabIndex = 0;
  cardAdd.setAttribute('role', 'button');
  cardAdd.setAttribute('aria-pressed', 'false');

  cardAdd.innerHTML = `
    <div class="d-flex flex-column justify-content-center align-items-center h-100 w-100">
      <div style="font-size: 2.8rem; color: #4979d5; margin-bottom: 12px;">+</div>
      <h5 class="card-title mb-3" style="font-weight:700;">Adicionar Turma</h5>
      <p class="card-text" style="color:#4a4a4a; font-size:0.99rem;">Clique para cadastrar uma nova turma.</p>
    </div>
  `;

  cardAdd.onclick = () => {
    const title = prompt('Digite o nome da nova turma:');
    if (!title) return;
    const code = prompt('Digite o código da nova turma:');
    if (!code) return;

    const newCard = {
      id: cardsData.length + 1,
      title: title,
      descriptions: [`Código da Turma: ${code}`],
      onClick: () => alert(`Abrindo turma: ${title}`),
    };
    cardsData.push(newCard);

    // Remove temporariamente o card "Adicionar Turma"
    cardsContainer.removeChild(colAdd);

    // Renderiza novo card (fica no fim)
    renderCard(newCard);

    // Recoloca o card "Adicionar Turma" no final
    cardsContainer.appendChild(colAdd);
  };

  colAdd.appendChild(cardAdd);
  cardsContainer.appendChild(colAdd);

  </script>

</body>

</html>